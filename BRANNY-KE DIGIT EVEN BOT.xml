from mplfinance.original_flavor import candlestick_ohlc
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os

class Strategy:
    def __init__(self, capital=10000):
        self.capital = capital
        self.equity = capital
        self.balance = capital
        self.leverage = 1
        self.margin = 0
        self.equity_prev = capital
        self.longs = 0
        self.shorts = 0
        self.neutral = True
        self.contract_size = 100000
        self.entry_price = 0
        self.stop_loss = 0
        self.target_profit = 0

    def calculate_margin(self, entry_price, stop_loss, target_profit):
        self.entry_price = entry_price
        self.stop_loss = stop_loss
        self.target_profit = target_profit
        initial_margin = (self.contract_size * self.entry_price) / (self.leverage * self.stop_loss)
        self.margin = initial_margin * (1 + 0.01 * self.contract_size * (stop_loss - target_profit))
        self.equity = self.balance + self.margin * self.leverage

    def calculate_equity(self, bid, ask):
        if self.longs > 0:
            profit = (ask - self.entry_price) * self.longs * self.contract_size
        elif self.shorts > 0:
            profit = (self.entry_price - bid) * self.shorts * self.contract_size
        else:
            profit = 0
        self.equity = self.balance + profit

    def enter_long(self, entry_price, stop_loss, target_profit):
        self.calculate_margin(entry_price, stop_loss, target_profit)
        self.longs += 1
        self.neutral = False

    def enter_short(self, entry_price, stop_loss, target_profit):
        self.calculate_margin(entry_price, stop_loss, target_profit)
        self.shorts += 1
        self.neutral = False

    def exit_trade(self, bid, ask):
        if self.longs > 0:
            profit = (ask - self.entry_price) * self.longs * self.contract_size
            self.longs -= 1
        elif self.shorts > 0:
            profit = (self.entry_price - bid) * self.shorts * self.contract_size
            self.shorts -= 1
        self.balance += profit
        self.equity = self.balance + self.margin * self.leverage
        if self.longs == 0 and self.shorts == 0:
            self.neutral = True

def strategy(df):
    s = Strategy()
    s.calculate_equity(df['Close'].values[-1], df['Close'].values[-1])
    s.enter_long(df['Close'].values[-2], df['Close'].values[-2] * 0.9, df['Close'].values[-2] * 1.1)
    s.calculate_equity(df['Close'].values[-1], df['Close'].values[-1])
    if df['Close'].values[-1] >= df['Close'].values[-2] * 1.1:
        s.exit_trade(df['Close'].values[-1], df['Close'].values[-1])
    return s.equity

df = pd.read_csv('btc_data.csv')
df = df.set_index('Date')
df = df[['Open', 'High', 'Low', 'Close']]
equity = strategy(df)
print('Target Profit Achieved ', equity - 10000, ' ($)   [HGA]')
